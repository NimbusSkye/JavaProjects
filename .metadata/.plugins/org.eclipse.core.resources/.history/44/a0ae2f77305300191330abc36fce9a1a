package regularexpression;
import java.util.Arrays;
import java.util.Random;
public class Testing {

	public static void main(String[] args) {
		Random rng = new Random ();
		Integer[] heap = new Integer [7];
		for (int i = 1; i < 7; i++) {
			heap[i] = rng.nextInt(10);
		}
		System.out.println(Arrays.toString(heap));
		for (int i = heap.length/2; i > 0; i--)
			downHeap(heap, i, heap.length - 1);
		System.out.println(Arrays.toString(heap));
		System.out.print(findMin(heap));
	}
	
	public static void upHeap (Integer[] heap, int position) {
		while (position > 1) {
			Integer cur = heap[position];
			if (cur > heap[position/2])
				swap (heap, position, position/2);
			position = position/2;
		}
	}
	
	public static void downHeap (Integer[] heap, int start, int end) {
		int i = start;
		while (2*i <= end) {
			Integer child = heap[2*i];
			if (2*i+1 <= end && heap[2*i+1] > child) {
				child = heap[2*i+1];
				if (heap[i] < child) {
					swap (heap, i, 2*i+1);
					i = 2*i+1;
				}
			}
			else if (child > heap[i]) {
				swap (heap, i, 2*i);
				i = 2*i;
			}
			else
				break;
		}
	}
	
	public static Integer findMin (Integer[] heap) {
		int j = 0;
		Integer[] stuff = new Integer [heap.length/2+1];
		for (int i = heap.length/2; i < heap.length; i++) {
			stuff[j] = heap[i];
			j++;
		}	
		return findMinimum(stuff);
	}
	
	public static Integer findMinimum (Integer[] blargh) {
		Integer min = blargh[0];
		for (int i = 1; i < blargh.length; i++) {
			if (min > blargh[i])
				min = blargh[i];
		}
		return min;
	}

	
	public static void swap (Integer[] heap, int pos1, int pos2) {
		int temp = heap[pos1].intValue();
		heap[pos1] = new Integer (heap[pos2].intValue());
		heap[pos2] = new Integer (temp);
	}
}
